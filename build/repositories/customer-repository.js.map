{"version":3,"sources":["../../src/repositories/customer-repository.js"],"names":["sql","require","ALL_CUSTOMERS_SQL","CUSTOMER_BY_ID_SQL","INVALID_CUSTOMER_ID","CustomerRepository","getAllCustomers","customers","result","DbManager","executeQuery","recordset","forEach","element","__proto__","Customer","getCustomer","id","filteredCustomer","parameterDefs","name","type","Int","parameterValues","customerId","executePrepareQuery"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAMC,iBAAiB,GAAG,yBAA1B;AACA,MAAMC,kBAAkB,GAAG,wDAA3B;AACA,MAAMC,mBAAmB,GAAG,gCAA5B;;AAEA,MAAMC,kBAAN,CAAyB;AACrB,QAAMC,eAAN,GAAwB;AACpB,QAAIC,SAAS,GAAG,EAAhB;AAEA,UAAMC,MAAM,GAAG,MAAMC,qBAAUC,YAAV,CAAuBR,iBAAvB,CAArB;;AAEA,QAAIM,MAAM,CAACG,SAAX,EAAsB;AAClBH,MAAAA,MAAM,CAACG,SAAP,CAAiBC,OAAjB,CAAyBC,OAAO,IAAI;AAChCA,QAAAA,OAAO,CAACC,SAAR,GAAoB,IAAIC,gBAAJ,EAApB;AACH,OAFD;AAIAR,MAAAA,SAAS,GAAGC,MAAM,CAACG,SAAnB;AACH;;AAED,WAAOJ,SAAP;AACH;;AAED,QAAMS,WAAN,CAAkBC,EAAlB,EAAsB;AAClB,QAAIC,gBAAJ;AAEA,UAAMC,aAAa,GAAG,CAClB;AAAEC,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,IAAI,EAAErB,GAAG,CAACsB;AAAhC,KADkB,CAAtB;AAGA,UAAMC,eAAe,GAAG;AAAEC,MAAAA,UAAU,EAAEP;AAAd,KAAxB;AACA,UAAMT,MAAM,GAAG,MAAMC,qBAAUgB,mBAAV,CACjBtB,kBADiB,EACGgB,aADH,EACkBI,eADlB,CAArB;;AAGA,QAAIf,MAAM,CAACG,SAAX,EAAsB;AAClBO,MAAAA,gBAAgB,GAAGV,MAAM,CAACG,SAAP,CAAiB,CAAjB,CAAnB;AACAO,MAAAA,gBAAgB,CAACJ,SAAjB,GAA6B,IAAIC,gBAAJ,EAA7B;AACH;;AAED,WAAOG,gBAAP;AACH;;AAjCoB;;QAqCrBb,kB,GAAAA,kB","sourcesContent":["import { DbManager } from \"../db-management/db-manager\";\r\nimport { Customer } from \"../models\";\r\n\r\nconst sql = require('mssql');\r\nconst ALL_CUSTOMERS_SQL = 'SELECT * FROM Customers';\r\nconst CUSTOMER_BY_ID_SQL = 'SELECT * FROM Customers WHERE CustomerId = @customerId';\r\nconst INVALID_CUSTOMER_ID = 'Invalid Customer Id Specified!';\r\n\r\nclass CustomerRepository {\r\n    async getAllCustomers() {\r\n        let customers = [];\r\n\r\n        const result = await DbManager.executeQuery(ALL_CUSTOMERS_SQL);\r\n\r\n        if (result.recordset) {\r\n            result.recordset.forEach(element => {\r\n                element.__proto__ = new Customer();\r\n            });\r\n\r\n            customers = result.recordset;\r\n        }\r\n\r\n        return customers;\r\n    }\r\n\r\n    async getCustomer(id) {\r\n        let filteredCustomer;\r\n\r\n        const parameterDefs = [\r\n            { name: 'customerId', type: sql.Int }\r\n        ];\r\n        const parameterValues = { customerId: id };\r\n        const result = await DbManager.executePrepareQuery(\r\n            CUSTOMER_BY_ID_SQL, parameterDefs, parameterValues);\r\n\r\n        if (result.recordset) {\r\n            filteredCustomer = result.recordset[0];\r\n            filteredCustomer.__proto__ = new Customer();\r\n        }\r\n\r\n        return filteredCustomer;\r\n    }\r\n}\r\n\r\nexport {\r\n    CustomerRepository\r\n};\r\n"],"file":"customer-repository.js"}