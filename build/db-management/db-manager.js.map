{"version":3,"sources":["../../src/db-management/db-manager.js"],"names":["sql","require","INVALID_STATEMENT","DB_CONFIG","configuration","getDbConfiguration","DbManager","executeQuery","statement","Error","pool","connect","result","query","close","executePrepareQuery","parameterDefs","parameterValues","preparedStatement","PreparedStatement","definition","input","name","type","prepare","execute","error","console","unprepare"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAMC,iBAAiB,GAAG,kCAA1B;;AACA,MAAMC,SAAS,GAAGC,sBAAcC,kBAAd,EAAlB;;AAEA,MAAMC,SAAN,CAAgB;AACZ,eAAaC,YAAb,CAA0BC,SAA1B,EAAqC;AACjC,QAAI,CAACA,SAAL,EAAgB;AACZ,YAAM,IAAIC,KAAJ,CAAUP,iBAAV,CAAN;AACH;;AAED,UAAMQ,IAAI,GAAG,MAAMV,GAAG,CAACW,OAAJ,CAAYR,SAAZ,CAAnB;AACA,UAAMS,MAAM,GAAG,MAAMF,IAAI,CAACG,KAAL,CAAWL,SAAX,CAArB;AAEA,UAAMR,GAAG,CAACc,KAAJ,EAAN;AAEA,WAAOF,MAAP;AACH;;AAED,eAAaG,mBAAb,CAAiCP,SAAjC,EAA4CQ,aAA5C,EAA2DC,eAA3D,EAA4E;AACxE,QAAI,CAACT,SAAL,EAAgB;AACZ,YAAM,IAAIC,KAAJ,CAAUP,iBAAV,CAAN;AACH;;AAED,QAAIU,MAAJ;AACA,QAAIM,iBAAJ;;AAEA,QAAI;AACA,YAAMR,IAAI,GAAG,MAAMV,GAAG,CAACW,OAAJ,CAAYR,SAAZ,CAAnB;AACAe,MAAAA,iBAAiB,GAAG,IAAIlB,GAAG,CAACmB,iBAAR,CAA0BT,IAA1B,CAApB;;AAEA,WAAK,IAAIU,UAAT,IAAuBJ,aAAvB,EAAsC;AAClCE,QAAAA,iBAAiB,CAACG,KAAlB,CAAwBD,UAAU,CAACE,IAAnC,EAAyCF,UAAU,CAACG,IAApD;AACH;;AAED,YAAML,iBAAiB,CAACM,OAAlB,CAA0BhB,SAA1B,CAAN;AAEAI,MAAAA,MAAM,GAAG,MAAMM,iBAAiB,CAACO,OAAlB,CAA0BR,eAA1B,CAAf;AACH,KAXD,CAWE,OAAOS,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AAEA,YAAMA,KAAN;AACH,KAfD,SAeU;AACN,YAAMR,iBAAiB,CAACU,SAAlB,EAAN;AACA,YAAM5B,GAAG,CAACc,KAAJ,EAAN;AACH;;AAED,WAAOF,MAAP;AACH;;AA3CW;;QA+CZN,S,GAAAA,S","sourcesContent":["import { configuration } from \"../config\";\r\n\r\nconst sql = require('mssql');\r\nconst INVALID_STATEMENT = 'Invalid SQL Statement Specified!';\r\nconst DB_CONFIG = configuration.getDbConfiguration();\r\n\r\nclass DbManager {\r\n    static async executeQuery(statement) {\r\n        if (!statement) {\r\n            throw new Error(INVALID_STATEMENT)\r\n        }\r\n\r\n        const pool = await sql.connect(DB_CONFIG);\r\n        const result = await pool.query(statement);\r\n\r\n        await sql.close();\r\n\r\n        return result;\r\n    }\r\n\r\n    static async executePrepareQuery(statement, parameterDefs, parameterValues) {\r\n        if (!statement) {\r\n            throw new Error(INVALID_STATEMENT)\r\n        }\r\n\r\n        let result;\r\n        let preparedStatement;\r\n\r\n        try {\r\n            const pool = await sql.connect(DB_CONFIG);\r\n            preparedStatement = new sql.PreparedStatement(pool);\r\n\r\n            for (let definition of parameterDefs) {\r\n                preparedStatement.input(definition.name, definition.type);\r\n            }\r\n\r\n            await preparedStatement.prepare(statement);\r\n\r\n            result = await preparedStatement.execute(parameterValues);\r\n        } catch (error) {\r\n            console.error(error);\r\n\r\n            throw error;\r\n        } finally {\r\n            await preparedStatement.unprepare();\r\n            await sql.close();\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport {\r\n    DbManager\r\n};"],"file":"db-manager.js"}